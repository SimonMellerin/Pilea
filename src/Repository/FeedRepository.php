<?php

namespace App\Repository;

use App\Entity\Feed;
use App\Entity\FeedData;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Feed::class);
    }

    /**
     * Create and persist Feed dependent FeedData according to it type.
     */
    public function createDependentFeedData(Feed $feed): void
    {
        $entityManager = $this->getEntityManager();
        $feedDataRepository = $entityManager->getRepository('App:FeedData');

        // We check, for this feed, if each dataFeeds are already created,
        // and create it if not.
        foreach (\array_keys(Feed::FEED_TYPES[$feed->getFeedType()]['DATA_TYPE']) as $label) {
            $feedData = $feedDataRepository->findOneBy([
                'feed' =>  $feed,
                'dataType' => $label
            ]);

            if (!$feedData) {
                $feedData = new FeedData();
                $feedData->setDataType($label);
                $feedData->setFeed($feed);
                $entityManager->persist($feedData);
            }
        }
    }

    /**
     * Remove ALL data (feedData and dataValue) for a feed and then feed itself
     */
    public function purge(Feed $feed)
    {
        $feedDataRepository = $this
            ->getEntityManager()
            ->getRepository('App:FeedData')
        ;

        foreach ($feedDataRepository->findByFeed($feed) as $feedData) {
            $feedDataRepository->purge($feedData);
        }

        $this
            ->createQueryBuilder('f')
            ->delete()
            ->where('f.id = :id')
            ->setParameter('id', $feed->getId())
            ->getQuery()
            ->execute()
        ;
    }

    public function findAllActive()
    {
        return $this
            ->createQueryBuilder('f')
            ->select()
            ->innerJoin('f.place', 'p')
            ->innerJoin('p.user', 'u')
            ->where('u.active = 1')
            ->getQuery()
            ->getResult()
        ;
    }
}
